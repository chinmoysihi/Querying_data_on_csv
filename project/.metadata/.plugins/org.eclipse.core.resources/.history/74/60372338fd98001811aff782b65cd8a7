package com.fragma.data;

import java.text.DecimalFormat;
import java.util.*;
import java.util.Map.Entry;

public class TopTenEconomy {
	
	public static void economy(ArrayList<Deliveries> darr,ArrayList<Matches> marr) {
		
		LinkedHashMap<String,String> map= new LinkedHashMap<>();
		int trun=0;
		int tovr=0;
		for(Matches m : marr) {
			map.put(m.getMATCH_ID()	, m.getSEASON());
		}
		LinkedHashMap<String,String> smap= new LinkedHashMap<>();
		Set<Entry<String,String>> set= map.entrySet();
		
		for(Entry<String,String> entry:set) {
			int movr=0;
			for(Deliveries d:darr) {
				if(entry.getKey().toString().equals(d.getMATCH_ID())) {
					String key= entry.getValue().toString()+","+d.getBOWLER();
					String val="";
					if(!smap.containsKey(key)) {
						trun=Integer.parseInt(d.getWIDE_RUNS())+Integer.parseInt(d.getNOBALL_RUNS())+Integer.parseInt(d.getBATSMAN_RUNS());
						movr=1;
						tovr=1;
						smap.put(key, trun+","+tovr); 
					}else {
						int r=Integer.parseInt(d.getWIDE_RUNS())+Integer.parseInt(d.getNOBALL_RUNS())+Integer.parseInt(d.getBATSMAN_RUNS());
						String arr[]= smap.get(key).toString().split(",");
						trun=Integer.parseInt(arr[0]);
						tovr=Integer.parseInt(arr[1]);
						trun+=r;
						if(Integer.parseInt(d.getOVER())>movr) {
							tovr++;
							movr++;
						}
						smap.put(key, trun+","+tovr);
					}
				}
			}
		}
		LinkedHashMap<String,String> rmap= new LinkedHashMap<>();
		Set<Integer> syear= new TreeSet<>();
		Set<Entry<String,String>> sset= smap.entrySet();
		for(Entry<String,String> entry: sset) {
			String key= entry.getKey().toString();
			String yarr[]= key.split(",");
			int yr= Integer.parseInt(yarr[0]);
			String val=entry.getValue().toString();
			String arr[]=val.split(",");
			int ovr= Integer.parseInt(arr[1]);
			if(ovr>9) {
				rmap.put(key, val);
				syear.add(yr);
			}
		}
		
		Set<Entry<String,String>> rset= rmap.entrySet();
		LinkedHashMap <String,Double> dmap= new LinkedHashMap<>();
		for(int s:syear) {
			Map<String,Double> dumap= new LinkedHashMap<>();
			for(Entry<String,String> entry: rset) {
				String key= entry.getKey().toString();
				String yarr[]= key.split(",");
				int yr= Integer.parseInt(yarr[0]);
				if(s==yr) {
					String sarr[]= entry.getValue().split(",");
					DecimalFormat df = new DecimalFormat("#.##");
					double economy= Double.valueOf(df.format(Double.parseDouble(sarr[0])/Integer.parseInt(sarr[1])));
					dumap.put(key, economy);
				}
			}
			//Map<String,Integer> sortdumap= sortedMap(dumap);
			System.out.println(dumap);
		}
		
		//System.out.println(rmap);
	}
	
	public static Map sortedMap(Map<String,Long> map) {
		Set<Entry<String, Long>> set = map.entrySet();
        List<Entry<String, Long>> list = new ArrayList<Entry<String, Long>>(set);
        Collections.sort( list, new Comparator<Map.Entry<String, Long>>()
        {
            public int compare( Map.Entry<String, Long> o1, Map.Entry<String, Long> o2 )
            {
                return (int) ((int)((long)(o2.getValue())) - ((long)( o1.getValue() )));
            }
        } );
        Map<String, Long> sortedMap = new LinkedHashMap<String, Long>();
        for(Map.Entry<String, Long> entry:list){
        	sortedMap.put(entry.getKey(), entry.getValue());
        }
        return sortedMap;
	}
}
